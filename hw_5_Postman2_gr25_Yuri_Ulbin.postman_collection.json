{
	"info": {
		"_postman_id": "bbb5122f-e090-4a0c-b48d-1cdaf26103a1",
		"name": "hw_5_Postman2_gr25_Yuri_Ulbin",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1) first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}first",
					"host": [
						"{{url}}first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2) user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"var resp_name = jsonData.name;\r",
							"var resp_age = +jsonData.age;\r",
							"var resp_salary = jsonData.salary;\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Resp_Name = Yuri\", function () { pm.expect(resp_name).to.eql(\"Yuri\"); });\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Resp_Age = 23\", function () { pm.expect(resp_age).to.eql(23); });\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Resp_Salary = 1000\", function () { pm.expect(resp_salary).to.eql(1000); });\r",
							"\r",
							"//7. Спарсить request.\r",
							"var reqBody = (request.data)\r",
							"var req_name = reqBody.name;\r",
							"var req_age = +reqBody.age;\r",
							"var req_salary = +reqBody.salary;\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Req_Name = Yuri\", function () { pm.expect(resp_name).to.eql(req_name); });\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Req_Age = 23\", function () { pm.expect(resp_age).to.eql(req_age); });\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Req_Salary = 1000\", function () { pm.expect(resp_salary).to.eql(req_salary); });\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year = salary*4\", function () { pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req_salary*4); });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Yuri",
							"type": "text"
						},
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "3) object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200);});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"var resp_name = jsonData.name;\r",
							"var resp_age = +jsonData.age;\r",
							"var resp_salary = jsonData.salary;\r",
							"\r",
							"//4. Спарсить request.\r",
							"var reqBody = pm.request.url.query.toObject();\r",
							"var req_name = reqBody.name;\r",
							"var req_age = +reqBody.age;\r",
							"var req_salary = +reqBody.salary;\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Req_Name = Yuri\", function () { pm.expect(jsonData.name).to.eql(reqBody.name); });\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Req_Age = 23\", function () { pm.expect(resp_age).to.eql(req_age); });\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Req_Salary = 1000\", function () { pm.expect(resp_salary).to.eql(req_salary); });\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"tests[\"Parameter 'Dog' have parameter 'name' \"] = jsonData.family.pets.dog.name !== null ;\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"tests[\"Parameter 'Dog' have parameter 'age' \"] = jsonData.family.pets.dog.age !== null ;\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog's name = Luky\", function () { pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\"); });\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog age = 4\", function () { pm.expect(jsonData.family.pets.dog.age).to.eql(4); });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_3?name=Yuri&age=23&salary=1000",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Yuri"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4) object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () { pm.response.to.have.status(200); });\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"var resp_name = jsonData.name;\r",
							"var resp_age = +jsonData.age;\r",
							"var resp_salary = jsonData.salary;\r",
							"\r",
							"//4. Спарсить request.\r",
							"var reqBody = pm.request.url.query.toObject();\r",
							"var req_name = reqBody.name;\r",
							"var req_age = +reqBody.age;\r",
							"var req_salary = +reqBody.salary;\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Req_Name = Yuri\", function () { pm.expect(jsonData.name).to.eql(reqBody.name); });\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Req_Age = 23\", function () { pm.expect(resp_age).to.eql(req_age); });\r",
							"\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(req_salary);\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(resp_salary);\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(resp_salary[0]);\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp_salary[1]);\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp_salary[2]);\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"resp_salary[0] = req_salary\", function () { pm.expect(resp_salary[0]).to.eql(req_salary); });\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"resp_salary[1] = req_salary*2\", function () { pm.expect(+resp_salary[1]).to.eql(req_salary*2); });\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"resp_salary[2] = req_salary*3\", function () { pm.expect(+resp_salary[2]).to.eql(req_salary*3); });\r",
							"\r",
							"//15. Создать в окружении переменную name\r",
							"pm.environment.set('name');\r",
							"\r",
							"//16. Создать в окружении переменную age\r",
							"pm.environment.set('age');\r",
							"\r",
							"//17. Создать в окружении переменную salary\r",
							"pm.environment.set('salary');\r",
							"\r",
							"//18. Передать в окружение переменную name\r",
							"pm.environment.set('name',req_name);\r",
							"\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set('age',req_age);\r",
							"\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set('salary',req_salary);\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"let obj = resp_salary;\r",
							"for (let key in obj) {\r",
							"\tconsole.log(obj[key]); \r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_4?name=Yuri&age=23&salary=1000",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Yuri"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5) user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//6. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"var resp_name = jsonData.name;\r",
							"var resp_age = +jsonData.age;\r",
							"var resp_salary = jsonData.salary;\r",
							"\r",
							"//7. Спарсить request.\r",
							"var reqBody = (request.data)\r",
							"var req_name = reqBody.name;\r",
							"var req_age = +reqBody.age;\r",
							"var req_salary = +reqBody.salary;\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"tests[\"json response has parameter start_qa_salary\"] = \"jsonData.start_qa_salary\" !== null ;\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"tests[\"json response has parameter qa_salary_after_6_months\"] = [\"jsonData.qa_salary_after_6_months\"] !== null ;\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"tests[\"json response has parameter qa_salary_after_12_months\"] = [\"jsonData.qa_salary_after_12_months\"] !== null ;\r",
							"\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"tests[\"json response has parameter qa_salary_after_1.5_year\"] = [\"jsonData.qa_salary_after_1.5_year\"] !== null ;\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"tests[\"json response has parameter qa_salary_after_3.5_years\"] = [\"jsonData.qa_salary_after_3.5_years\"] !== null ;\r",
							"\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"tests[\"json response has parameter person\"] = \"jsonData.person\" !== null ;\r",
							"\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary is equal req_salary\", function () { pm.expect(jsonData.start_qa_salary).to.eql(req_salary); });\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months is equal salary*2\", function () { pm.expect(jsonData.qa_salary_after_6_months).to.eql(req_salary*2); });\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months is equal salary*2.7\", function () { pm.expect(jsonData.qa_salary_after_12_months).to.eql(req_salary*2.7); });\r",
							"\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year is equal salary*3.3\", function () { pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(req_salary*3.3); });\r",
							"\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years is equal salary*3.8\", function () { pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(req_salary*3.8); });\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"jsonData.person.u_name[1] is equal req_salary\", function () { pm.expect(jsonData.person.u_name[1]).to.eql(req_salary); });\r",
							"\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"jsonData.person.u_age is equal req_age\", function () { pm.expect(jsonData.person.u_age).to.eql(req_age); });\r",
							"\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"jsonData.person.u_salary_5_years is equal req_salary*4.2\", function () { pm.expect(jsonData.person.u_salary_5_years).to.eql(req_salary*4.2); });\r",
							"\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"var obj = jsonData.person;\r",
							"\r",
							"for (var prop in obj) {\r",
							"  console.log(prop + \" = \" + obj[prop]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		}
	]
} 
